import 'package:flutter/material.dart';
import 'package:library_ms/LibraryService.dart';
import 'package:library_ms/Models/book';

class CreateBookPage extends StatefulWidget {
  @override
  _CreateBookPageState createState() => _CreateBookPageState();
}

class _CreateBookPageState extends State<CreateBookPage> {
  final TextEditingController _titleController = TextEditingController();
  final TextEditingController _authorController = TextEditingController();
  final TextEditingController _isbnController = TextEditingController();
  final TextEditingController _genreController = TextEditingController();
  final TextEditingController _publicationDateController =
  TextEditingController();
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar:AppBar(
        backgroundColor: Color(0xFFDFC0A0),
        title: Text(
          'Create Transaction',
          style: TextStyle(
              fontFamily: "Det",
              color: Color(0xff704929),
              fontWeight: FontWeight.bold),
        ),
      ),
      body: Container(
             height: double.infinity,
        width: double.infinity,
                decoration: BoxDecoration(
          image: DecorationImage(
              image: AssetImage("assets/images/n2.jpg"), fit: BoxFit.cover),),
        child: SingleChildScrollView(
          padding: const EdgeInsets.all(20.0),
          child: Column(
           mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Container(        margin: EdgeInsets.all(1),
                padding: EdgeInsets.all( 15),
                decoration:   BoxDecoration(borderRadius: BorderRadius.only(topLeft: Radius.circular(50),bottomRight: Radius.circular(50)),gradient: LinearGradient(colors: [ Color(0xFFBD7B46),
                  Color(0xFFDFC0A0), ],begin: Alignment.bottomLeft,
                  end: Alignment.bottomRight,)),
                child: TextField(
                                 controller: _titleController,
                decoration: InputDecoration(labelText: 'Title'),
                ),
              ),   SizedBox(height: 5,),
 Container(        margin: EdgeInsets.all(1),
                padding: EdgeInsets.all( 15),
                decoration:   BoxDecoration(borderRadius: BorderRadius.only(topLeft: Radius.circular(50),bottomRight: Radius.circular(50)),gradient: LinearGradient(colors: [ Color(0xFFBD7B46),
                  Color(0xFFDFC0A0), ],begin: Alignment.bottomLeft,
                  end: Alignment.bottomRight,)),
                child: TextField(
              controller: _authorController,
                decoration: InputDecoration(labelText: 'Author'),
                ),
              ),   SizedBox(height: 5,),
 Container(        margin: EdgeInsets.all(1),
                padding: EdgeInsets.all( 15),
                decoration:   BoxDecoration(borderRadius: BorderRadius.only(topLeft: Radius.circular(50),bottomRight: Radius.circular(50)),gradient: LinearGradient(colors: [ Color(0xFFBD7B46),
                  Color(0xFFDFC0A0), ],begin: Alignment.bottomLeft,
                  end: Alignment.bottomRight,)),
                child: TextField(
                           controller: _isbnController,
                decoration: InputDecoration(labelText: 'ISBN'),
                ),
              ),   SizedBox(height: 5,),
 Container(        margin: EdgeInsets.all(1),
                padding: EdgeInsets.all( 15),
                decoration:   BoxDecoration(borderRadius: BorderRadius.only(topLeft: Radius.circular(50),bottomRight: Radius.circular(50)),gradient: LinearGradient(colors: [ Color(0xFFBD7B46),
                  Color(0xFFDFC0A0), ],begin: Alignment.bottomLeft,
                  end: Alignment.bottomRight,)),
                child: TextField(
                controller: _publicationDateController,
                decoration: InputDecoration(labelText: 'Publication Date'),
                ),
              ),   SizedBox(height: 5,),
        
        
              SizedBox(height: 16),
              ElevatedButton(
                onPressed: () async {
                  final newBook = Book(
                    id: '', // Set id as empty since it will be generated by the server
                    title: _titleController.text,
                    author: [_authorController.text],
                    ISBN: _isbnController.text,
                    genre: _genreController.text,
                    publicationDate: _publicationDateController.text,
        
                  );
        
                  try {
                    await LibraryService().createBook(newBook);
                    // Navigate back to the previous page after creating the book
                    Navigator.pop(context);
                  } catch (e) {
                    // Handle error
                    showDialog(
                      context: context,
                      builder: (context) => AlertDialog(
                        title: Text('Error'),
                        content: Text('Failed to create book: $e'),
                        actions: [
                          TextButton(
                            onPressed: () {
                              Navigator.pop(context); // Close the dialog
                            },
                            child: Text('OK'),
                          ),
                        ],
                      ),
                    );
                  }
                },
                child: Text('Create Book'),
              ),
            ],
          ),
        ),
      ),
    );
  }

  @override
  void dispose() {
    // Clean up the controller when the widget is disposed.
    _titleController.dispose();
    _authorController.dispose();
    _isbnController.dispose();
    _publicationDateController.dispose();

    super.dispose();
  }
}
