import 'package:flutter/material.dart';
import 'package:library_ms/LibraryService.dart';
import 'package:library_ms/Models/adminModel.dart';

class CreateAdminPage extends StatefulWidget {
  @override
  _CreateAdminPageState createState() => _CreateAdminPageState();
}

class _CreateAdminPageState extends State<CreateAdminPage> {
  final TextEditingController _usernameController = TextEditingController();
  final TextEditingController _passwordController = TextEditingController();
  final TextEditingController _roleController = TextEditingController();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar:AppBar(
        backgroundColor: Color(0xFFDFC0A0),
        title: Text(
          'Create Transaction',
          style: TextStyle(
              fontFamily: "Det",
              color: Color(0xff704929),
              fontWeight: FontWeight.bold),
        ),
      ),
      body: Container(
                height: double.infinity,
        width: double.infinity,
                decoration: BoxDecoration(
          image: DecorationImage(
              image: AssetImage("assets/images/n4.jpg"), fit: BoxFit.cover),
        ),
        child: SingleChildScrollView(
          padding: const EdgeInsets.all(20.0),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [

              Container(        margin: EdgeInsets.all(1),
                padding: EdgeInsets.all( 15),
                decoration:   BoxDecoration(borderRadius: BorderRadius.only(topLeft: Radius.circular(50),bottomRight: Radius.circular(50)),gradient: LinearGradient(colors: [ Color(0xFFBD7B46),
                  Color(0xFFDFC0A0), ],begin: Alignment.bottomLeft,
                  end: Alignment.bottomRight,)),
                child: TextField(
                                  controller: _usernameController,
                decoration: InputDecoration(labelText: 'Username'),
                ),
              ),   SizedBox(height: 5,),
              SizedBox(height: 16.0),
              Container(        margin: EdgeInsets.all(1),
                padding: EdgeInsets.all( 15),
                decoration:   BoxDecoration(borderRadius: BorderRadius.only(topLeft: Radius.circular(50),bottomRight: Radius.circular(50)),gradient: LinearGradient(colors: [ Color(0xFFBD7B46),
                  Color(0xFFDFC0A0), ],begin: Alignment.bottomLeft,
                  end: Alignment.bottomRight,)),
                child: TextField(
                 controller: _passwordController,
                decoration: InputDecoration(labelText: 'Password'),
                ),
              ),   SizedBox(height: 5,),
              SizedBox(height: 16.0),
              Container(        margin: EdgeInsets.all(1),
                padding: EdgeInsets.all( 15),
                decoration:   BoxDecoration(borderRadius: BorderRadius.only(topLeft: Radius.circular(50),bottomRight: Radius.circular(50)),gradient: LinearGradient(colors: [ Color(0xFFBD7B46),
                  Color(0xFFDFC0A0), ],begin: Alignment.bottomLeft,
                  end: Alignment.bottomRight,)),
                child: TextField(
                  controller: _roleController,
                decoration: InputDecoration(labelText: 'Role'),
                ),
              ),   SizedBox(height: 5,),
              SizedBox(height: 16.0),
              ElevatedButton(
                onPressed: () async {
                  final username = _usernameController.text;
                  final password = _passwordController.text;
                  final role = _roleController.text;
        
                  try {
                    // Create a new admin using the LibraryService method
                    final admin = Admin(
                      id: '', // ID will be generated by the server
                      username: username,
                      password: password,
                      role: role,
                    );
                    await LibraryService().createAdmin(admin);
        
                    // Navigate back to the previous page after successful creation
                    Navigator.pop(context);
                  } catch (e) {
                    // Handle any errors that occur during admin creation
                    showDialog(
                      context: context,
                      builder: (context) => AlertDialog(
                        title: Text('Error'),
                        content: Text('Failed to create admin: $e'),
                        actions: [
                          TextButton(
                            onPressed: () {
                              Navigator.pop(context); // Close the dialog
                            },
                            child: Text('OK'),
                          ),
                        ],
                      ),
                    );
                  }
                },
                child: Text('Create Admin'),
              ),
            ],
          ),
        ),
      ),
    );
  }

  @override
  void dispose() {
    _usernameController.dispose();
    _passwordController.dispose();
    _roleController.dispose();
    super.dispose();
  }
}
